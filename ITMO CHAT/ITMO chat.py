from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (ApplicationBuilder, CommandHandler,
                          CallbackQueryHandler, ContextTypes,
                          MessageHandler, filters)
import re
import URL_parc
from pdf_parc import extract_courses_from_pdf


# –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ (–∏–ª–∏ –∑–∞—Ä–∞–Ω–µ–µ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ) –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF —Ñ–∞–π–ª–æ–≤
# –ó–¥–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–æ–≤, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∂–∞–π—Ç–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ø–∞–º—è—Ç–∏
courses_plan1 = extract_courses_from_pdf(open("10130-abit.pdf", "rb"))
courses_plan2 = extract_courses_from_pdf(open("10033-abit.pdf", "rb"))

PAGE_SIZE = 10

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()  # –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏

    if '–ø—Ä–∏–≤–µ—Ç' in text:
        await start(update, context)

    elif '–ø–ª–∞–Ω' in text:
        await compare(update, context)

    elif '—á—Ç–æ' or 'help' in text:
        await update.message.reply_text("–Ø –º–æ–≥—É —Å—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º:")
        await URL_parc.show_command(update, context)

    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å—Ä–∞–≤–Ω–∏—Ç—å.")

# –í–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
QUESTIONS = [
    {
        "question": "–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –ò–ò?",
        "options": ["–ù–∞—á–∏–Ω–∞—é—â–∏–π", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"],
    },
    {
        "question": "–í–æ–ø—Ä–æ—Å 2: –ß—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ?",
        "options": ["–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞"],
    }
]
# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Ç–æ–≥–∞–º (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
RECOMMENDATIONS = {
    (0, 0): "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏/AI Product ‚Äî –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã.",
    (1, 1): "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç ‚Äî –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
}
async def send_question(update, context, q_index):
    question = QUESTIONS[q_index]['question']
    options = QUESTIONS[q_index]['options']
    keyboard = [
        [InlineKeyboardButton(opt, callback_data=f"answer_{q_index}_{i}")]
        for i, opt in enumerate(options)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        # –µ—Å–ª–∏ –≤—ã–∑–≤–∞–ª–∏ –∏–∑ callback, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text(text=question, reply_markup=reply_markup)
    else:
        # –µ—Å–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
        await update.message.reply_text(text=question, reply_markup=reply_markup)

async def answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data  # —Ñ–æ—Ä–º–∞—Ç: answer_<–Ω–æ–º–µ—Ä_–≤–æ–ø—Ä–æ—Å–∞>_<–Ω–æ–º–µ—Ä_–≤—ã–±–æ—Ä–∞>
    print(f"Handling callback data: {data}")
    parts = data.split('_')
    if len(parts) != 3 or parts[0] != 'answer':
        return
    q_index = int(parts[1])
    choice = int(parts[2])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers = context.user_data.get('answers', [])
    if len(answers) > q_index:
        answers[q_index] = choice
    else:
        answers.append(choice)
    context.user_data['answers'] = answers
    next_q_index = q_index + 1
    if next_q_index < len(QUESTIONS):
        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await send_question(update, context, next_q_index)
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã ‚Äî –≤—ã–¥–∞—ë–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        key = tuple(context.user_data['answers'])
        recommendation = RECOMMENDATIONS.get(key, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        await query.edit_message_text(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n{recommendation}")
        await URL_parc.update_command(update, context)
        await URL_parc.show_command(update, context)

def build_keyboard(page, max_page):
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{page-1}"))
    buttons.append(InlineKeyboardButton(f"–°—Ç—Ä. {page+1}/{max_page}", callback_data="noop"))
    if page < max_page - 1:
        buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_{page+1}"))
    return InlineKeyboardMarkup([buttons])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–µ—é —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ò–ò –∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –ò–ò –æ—Ç –ò–¢–ú–û! –î–∞–≤–∞–π –Ω–∞–π–¥—ë–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–º–µ–Ω–Ω–æ—è —Ç–µ–±–µ')
    context.user_data['answers'] = []
    await send_question(update, context, 0)

async def compare(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û–±—â–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", callback_data='show_common_0')],
        [InlineKeyboardButton("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –ø–ª–∞–Ω–∞ 1", callback_data='show_unique_1_0')],
        [InlineKeyboardButton("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –ø–ª–∞–Ω–∞ 2", callback_data='show_unique_2_0')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å:', reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    print(f"Handling callback data: {data}")

    # –ü–æ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏ –Ω—É–∂–Ω—ã—Ö callback_data
    pattern = r'(show_common|show_unique_1|show_unique_2)_(\d+)'
    match = re.match(pattern, data)
    if match:
        mode, page_str = match.groups()
        page = int(page_str)
    elif data.startswith('next_') or data.startswith('prev_'):
        page = int(data.split('_')[1])
        mode = context.user_data.get('mode', 'show_common')
    else:
        # noop –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return

    context.user_data['mode'] = mode
    context.user_data['page'] = page

    common = courses_plan1 & courses_plan2
    unique1 = courses_plan1 - courses_plan2
    unique2 = courses_plan2 - courses_plan1

    if mode == 'show_common':
        items = sorted(common)
        title = (f"üìã –û–±—â–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (–≤—Å–µ–≥–æ {len(common)}):\n"
                 f"–°–µ–º–µ—Å—Ç—Ä | –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã | –∑–∞—á. –µ–¥ | —á–∞—Å—ã")
    elif mode == 'show_unique_1':
        items = sorted(unique1)
        title = (f"üìå –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –ø–ª–∞–Ω–∞ 1 (–≤—Å–µ–≥–æ {len(unique1)}):\n"
                 f"–°–µ–º–µ—Å—Ç—Ä | –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã | –∑–∞—á. –µ–¥ | —á–∞—Å—ã")
    else:  # show_unique_2
        items = sorted(unique2)
        title = (f"üìå –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –ø–ª–∞–Ω–∞ 2 (–≤—Å–µ–≥–æ {len(unique2)}):\n"
                 f"–°–µ–º–µ—Å—Ç—Ä | –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã | –∑–∞—á. –µ–¥ | —á–∞—Å—ã")

    max_page = (len(items) + PAGE_SIZE - 1) // PAGE_SIZE
    page = max(0, min(page, max_page - 1))

    page_items = items[page*PAGE_SIZE:(page+1)*PAGE_SIZE]
    msg = f"{title}\n\n" + "\n".join(f"{i+1 + page*PAGE_SIZE}. {item}" for i, item in enumerate(page_items))

    keyboard = build_keyboard(page, max_page)
    await query.edit_message_text(msg, reply_markup=keyboard)



if __name__ == '__main__':
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    TOKEN = '7917796591:AAEIX5L59A1YYuvRpvkSbxxLc-9WGlcujd0'

    application = ApplicationBuilder().token(TOKEN).build()


    application.add_handler(CallbackQueryHandler(answer_handler, pattern=r"answer_\d+_\d+"))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CallbackQueryHandler(URL_parc.button_handler, pattern=r"show_\d+_\d+"))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), message_handler))
    URL_parc.register_handlers(application)
    application.add_handler(CommandHandler("start", start))

    print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ö–µ–Ω–¥–ª–µ—Ä—ã:")
    print(application.handlers)
    application.run_polling()






